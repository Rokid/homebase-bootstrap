var native = require('./logger_bridge.node')
var log_levels = {
  none: 0,
  debug: 1,
  info: 2,
  warn: 3,
  error: 4,
  fatal: 5,
  max: 6,
}

var isInited = false
var enableStdPrint = true
var enableUpload = false

function Logger(name) {
  if (!name) { name = 'syst' }
  if (name.length > 4) { name = name.slice(0, 4) }

  // map for 1/2/3
  switch (name.length) {
    case 1: name = ` :${name} `; break
    case 2: name = ` ${name} `; break
    case 3: name = `:${name}`; break
  }
  this.name = name
}

/**
 * @param {String} type logger type, info|warn|error etc..
 * @param {Array} args log argument
 * @param {String} prefix log prefix string
 * @param {String} suffix log suffix string
 */
Logger.prototype._doLog = function (type, args, prefix, suffix) {
  if (!enableUpload && !enableStdPrint) {
    return
  }
  var now = (new Date()).toISOString()
  var msg = ''
  for (var i = 0; i < args.length; ++i) {
    var c = args[i]
    if (c instanceof Error) {
      msg += ` Error: ${c.message}, ${c.name || ''}, ${c.code || ''}`
    } else if (typeof c === 'object') {
      msg += ` ${JSON.stringify(c)}`
    } else if (c && c.toString) {
      msg += ` ${c.toString()}`
    }
  }
  if (enableUpload) {
    var levelNumber = log_levels[type]
    if (levelNumber && levelNumber >= log_levels.info) {
      native.log(this.name, type, now, msg)
    }
  }
  if (enableStdPrint) {
    prefix = prefix || ''
    suffix = suffix || ''
    console[type](`${prefix}[${now}] [${this.name}] [${type}] ${msg}${suffix}`)
  }
}

Logger.prototype.log = function () {
  this._doLog('log', arguments)
}

Logger.prototype.info = function () {
  this._doLog('info', arguments, '\x1B[0;32m', '\x1B[0m')
}

Logger.prototype.warn = function () {
  this._doLog('warn', arguments, '\x1B[0;33m', '\x1B[0m')
}

Logger.prototype.error = function () {
  this._doLog('error', arguments, '\x1B[0;31m', '\x1B[0m')
}

Logger.prototype.debug = function () {
  this._doLog('debug', arguments)
}

module.exports = {

  /**
   * get a named logger, the logger is configured by initGlobalOptions
   * @param {String} name logger name
   * @return {Logger}
   */
  get: function (name) {
    if (!isInited) {
      throw new Error('logger is not inited')
    }
    var logger = new Logger(name)
    return logger
  },

  /**
   * init logger, call this method before log
   * @param {Object} options logger global options
   * @param {Boolean} options.enableStdPrint is open std print
   * @param {Boolean} options.enableUpload is open upload
   * @param {Object?} options.configs
   * @param {String?} options.configs.logStore 日志服务logStore
   * @param {String?} options.configs.name topic名字
   * @param {String?} options.configs.project 服务project
   * @param {Number?} options.configs.bytesPerPackage 指定每个缓存的日志包的大小上限
   * @param {Number?} options.configs.countPerPackage 指定每个缓存的日志包中包含日志数量的最大值
   * @param {Number?} options.configs.packageTimeout 指定被缓存日志的发送超时时间，如果缓存超时，则会被立即发送
   * @param {Number?} options.configs.maxBufferBytes 指定单个Producer Client实例可以使用的内存的上限
   * @param {Object?} options.hints logger message hints
   * @param {String?} options.hints.sn
   * @param {String?} options.hints.deviceTypeId
   * @param {String?} options.hints.osVersion
   * @param {String?} options.hints.homebaseVersion
   * @param {String?} options.hints.env
   * @param {String?} options.hints.masterId
   */
  initGlobalOptions: function (options) {
    if (typeof options !== 'object') {
      throw new Error('logger options should be an object')
    }
    var configs = Object.assign({}, {
      project: 'rokid-linux',
      name: 'iot',
      logStore: 'rokid_mini',
      bytesPerPackage: 32 * 1024,
      countPerPackage: 5,
      packageTimeout: 3000,
      maxBufferBytes: 1 * 1024 * 1024,
    }, options.configs)
    var hints = options.hints || {}
    if (!isInited) {
      isInited = true
      enableStdPrint = !!options.enableStdPrint
      enableUpload = !!options.enableUpload
      native.init(enableUpload ? 1 : 0, configs, hints)
    }
  },

  /**
   * set logger hints
   * @param {Object} hints logger message hints
   * @param {String?} hints.sn
   * @param {String?} hints.deviceTypeId
   * @param {String?} hints.osVersion
   * @param {String?} hints.homebaseVersion
   * @param {String?} hints.env
   * @param {String?} hints.masterId
   */
  setHints: function (hints) {
    native.setHints(hints || {})
  }
}